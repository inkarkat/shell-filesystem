#!/bin/bash

printShortUsage()
{
    # Note: short followed by long option; if the user knows the short one, she can
    # skim the long one.
    printf 'Usage: %q %s\n' "$(basename "$1")" '[--backup-dir|-d DIR] [--delete-original] [--once-today] [--] FILE [...] [-?|-h|--help]'
    printf 'Usage: %q %s\n' "$(basename "$1")" '[--backup-dir|-d DIR] [--delete-original] [--once-today] --ignore-no-files [--] [FILE [...]] [-?|-h|--help]'
    echo
    printf 'Usage: sed -i"$(%q %s)" -e ... FILE\n' "$(basename "$1")" '--get-extension [--once-today] [--accept-nonexisting] [--] FILE'
}
printUsage()
{
    # This is the short help when launched with no or incorrect arguments.
    # It is printed to stderr to avoid accidental processing.
    printShortUsage "$1" >&2
    printf >&2 '\nTry %q --help for more information.\n' "$(basename "$1")"
}
printLongUsage()
{
    # This is the long "man page" when launched with the help argument.
    # It is printed to stdout to allow paging with 'more'.
    cat <<HELPDESCRIPTION
If a FILE.orig backup already exists, writes subsequent backups of FILE with a
'current date + counter' file extension (format '.YYYYMMDD[a-z]').
If no FILE.orig backup already exists, writes a single backup of FILE to
FILE.orig. Ignores passed directories and *.orig files.
HELPDESCRIPTION
    echo
    printShortUsage "$1"
    echo
    cat <<HELPTEXT
    --backup-dir|-d DIR		Create backups in DIR instead of in the same
				directory as the original FILE.
    --delete-original		Removes the original FILE after creating
				FILE.orig; you can use this for a final backup
				before getting rid of the FILE.
    --ignore-no-files		Do not complain when no FILE(s) have been
				passed. Useful when passing a glob that may
				resolve to no files at all, and that is
				acceptable.
    --once-today                A FILE is only backed up if no backup on the
                                current day was already made.
    --get-extension		Just print the backup extension (or nothing if
				--once-today and a backup already exists).
    --accept-nonexisting	Do not print an error if FILE does not exist,
				but simply print the would-be backup extension.
				Useful for direct-backup use cases where there's
				either no original FILE or it is located
				somewhere else. If you'd rather not create a
				backup if FILE does not exist yet, just
				suppress stderr and use the empty output (e.g.
				with sed -i\$backupExtension) or react on the
				exit status 1.
EXIT STATUS:
    0	Complete success.
    1	Failed to backup any FILE(s).
    2   Bad invocation, wrong or missing command-line arguments
    3	Internal error or failed assertion.
    6	Partial success; some FILE(s) could not be backed up.
HELPTEXT
}

isIgnoreNoFiles=
isDeleteOriginal=
isOnlyPrintExtension=
typeset -a anyBackupArgs=()
while [ $# -ne 0 ]
do
    case "$1" in
	--help|-h|-\?)	shift; printLongUsage "$0"; exit 0;;
	--backup-dir|-d)
			anyBackupArgs+=("$1" "$2"); shift; shift;;
	--delete-original)
			anyBackupArgs+=("$1"); shift; isDeleteOriginal=t;;
	--once-today)	anyBackupArgs+=("$1"); shift;;
	--ignore-no-files)
			shift; isIgnoreNoFiles=t;;
	--get-extension)
			anyBackupArgs+=("$1"); shift; isOnlyPrintExtension=t;;
	--accept-nonexisting)
			anyBackupArgs+=("$1"); shift;;
	--)		shift; break;;
	-*)		{ echo "ERROR: Unknown option \"${1}\"!"; echo; printUsage "$0"; } >&2; exit 2;;
	*)		break;;
    esac
done
if [ $# -eq 0 ] && [ ! "$isIgnoreNoFiles" ]; then
    printUsage "$0"
    exit 2
elif [ "$isOnlyPrintExtension" ] && [ $# -ne 1 ]; then
    echo 'ERROR: Only a single FILE can be passed with --get-extension.'
    echo
    printUsage "$0"
    exit 2
elif [ "$isOnlyPrintExtension" ] && [ "$isDeleteOriginal" ]; then
    echo 'ERROR: Cannot combine --get-extension and --delete-original.'
    echo
    printUsage "$0"
    exit 2
fi >&2


isSuccess=
isFailure=

for filespec
do
    if writeorig "${anyBackupArgs[@]}" -- "$filespec" || writebackup "${anyBackupArgs[@]}" "${writebackupArgs[@]}" -- "$filespec"; then
	isSuccess=t
    else
	isFailure=t
    fi
done

if [ "$isFailure" ]; then
    [ "$isSuccess" ] && exit 6 || exit 1
fi
