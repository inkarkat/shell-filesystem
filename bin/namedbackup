#!/bin/bash
###############################################################################
##
# FILE:		namedbackup
# PRODUCT:	shell-filesystem
# AUTHOR:	Ingo Karkat <ingo@karkat.de>
# DATE CREATED:	16-Feb-2023
#
###############################################################################
#
# DEPENDENCIES:
#   - cp, readlink, zip (or other archive tool)
#
###############################################################################

: ${NAMEDBACKUP_FILE_SEPARATOR= - }

printShortUsage()
{
    printf 'Usage: %q %s\n' "$(basename "$1")" '[-1|--each|-a|--archive] -n|--name NAME [--archive-program "zip -9 -r" --archive-extension .zip] [-C|--on-conflict ask|backup|increment|error|overwrite|update] [--basedir BASEDIR|--base-type config|data|runtime|cache|temp] [--backup-dir|-d DIR] [-p|--parents] [-D|--delete-original] [--] FILE [...] [--help|-h|-?]'
    echo
    printf 'Usage: backupFilespec=$(%q %s)\n' "$(basename "$1")" '[...] [--] FILE [...]'
}
printUsage()
{
    # This is the short help when launched with no or incorrect arguments.
    # It is printed to stderr to avoid accidental processing.
    printShortUsage "$1" >&2
    printf '\nTry %q %s\n' "$(basename "$1")" '--help for more information.'
}
printLongUsage()
{
    # This is the long "man page" when launched with the help argument.
    # It is printed to stdout to allow paging with 'more'.
    cat <<HELPDESCRIPTION
Write backup of FILE(s) as a zipped archive file (or named copy in case of a
single FILE).
HELPDESCRIPTION
    echo
    printShortUsage "$1"
    echo
    cat <<HELPTEXT
    --each|-1		Backup each FILE (and DIR) separately. Files will be
			copied to "NAME${NAMEDBACKUP_FILE_SEPARATOR}FILE" (in FILE's directory);
			directories will be archived.
    --archive|-a	Also archive a single passed FILE instead of just
			copying it.
    --name|-n NAME	The name of the backup [archive].
    --archive-program ARCHIVER-COMMAND
			Use a different archive program; e.g. you could use
			'tar' instead of 'zip' by specifying
			    --archive-program "tar cvf"
			    --archive-extension .tar
    --archive-extension EXT
			Configure the archive extension for a custom archiver.
    --on-conflict|-C ask|increment|error|overwrite|update
			Behavior when the backup already exists:
			    ask:	Query whether the backup should be
					overwritten. (This is the default.)
			    backup:	Backup the existing backup.
			    increment:	Append or increment a (1) to the NAME to
					create a non-existing backup filespec.
			    error:	Don't create a backup.
			    overwrite:	Delete the existing backup.
			    update:	Update existing files and add new ones
					to the archive. For single FILEs the
					same as overwrite.
    --basedir BASEDIR	Prepend BASEDIR in front of DIR / NAME (unless DIR is
			absolute).
    --base-type config|data|runtime|cache|temp
			Set the base directory to prepend based on the passed
			characterization.
    --backup-dir|-d DIR	Create backups in DIR instead of in the same directory
			as the original FILE.
    --parents|-p	Make parent directories for the backup destination as
			needed.
    --delete-original|-D
			Removes the original FILE; you can use this for a final
			backup before getting rid of FILE.
EXIT STATUS:
    0	Complete success.
    1	Failed to backup any FILE(s).
    2   Bad invocation, wrong or missing command-line arguments
    3	Internal error or failed assertion.
    6	Partial success; some FILE(s) could not be backed up.
HELPTEXT
}

isArchiveSingle=
isEach=
baseDir=
name=
archiveProgram='zip -9 -r'
archiveExtension='.zip'
onConflict=ask
backupDir=
isMakeParents=
isDeleteOriginal=
while [ $# -ne 0 ]
do
    case "$1" in
	--help|-h|-\?)	shift; printLongUsage "$0"; exit 0;;
	--each|-1)	shift; isEach=t;;
	--archive|-a)	shift; isArchiveSingle=t;;
	--basedir)	shift; baseDir="$1"; shift;;
	--base-type)	shift
			case "$1" in
			    config)	baseDir="${XDG_CONFIG_HOME:-$HOME/.config}";;
			    data)	baseDir="${XDG_DATA_HOME:-$HOME/.local/share}";;
			    runtime)	baseDir="${XDG_RUNTIME_DIR:-/run/user/$UID}";;
			    cache)	baseDir="${XDG_CACHE_HOME:-$HOME/.cache}";;
			    temp)	baseDir="${TMPDIR:-/tmp}";;
			    *)		printf >&2 'ERROR: Invalid base-type "%s".\n' "$1"
					echo >&2
					printUsage "$0" >&2
					exit 2
					;;
			esac
			shift
			;;
	--name|-n)	shift; name="${1:?}"; shift;;
	--archive-program)
			shift; archiveProgram="$1"; shift;;
	--archive-extension)
			shift; archiveExtension="$1"; shift;;
	--on-conflict|-C)
			shift; onConflict="$1"; shift;;
	--backup-dir|-d)
			if [ -z "$2" ]; then
			    { echo "ERROR: Must pass directory after ${1}!"; echo; printUsage "$0"; } >&2
			    exit 2
			fi
			shift
			backupDir="${1%/}/"
			shift
			;;
	--parents|-p)	shift; isMakeParents=t;;
	--delete-original|-D)
			shift; isDeleteOriginal=t;;
	--)		shift; break;;
	-*)		{ echo "ERROR: Unknown option \"${1}\"!"; echo; printUsage "$0"; } >&2; exit 2;;
	*)		break;;
    esac
done
if [ $# -eq 0 ]; then
    printUsage "$0"
    exit 2
elif [ -z "$name" ]; then
    echo 'ERROR: No -n|--name NAME passed.'
    echo
    printUsage "$0"
    exit 2
fi >&2

if [[ "$backupDir" =~ ^/ ]]; then
    backupDirspec="${backupDir%/}/"
else
    backupDirspec="${baseDir%/}${baseDir:+/}${backupDir%/}${backupDir:+/}"
fi
if [ -n "$backupDirspec" -a ! -d "$backupDirspec" ]; then
    if [ "$isMakeParents" ]; then
	mkdir --parents -- "$backupDirspec" || exit 3
    else
	printf 'ERROR: Backup dir does not exist: "%s".\n' "${backupDirspec%/}"
	exit 2
    fi
fi

ask()
{
    userBinaryChoice --question "Overwrite existing backup '$backupFilespec'?" --ok-cancel
}
backup()
{
    writebackup -- "$backupFilespec"
}
increment()
{
    let counter+=1
    return 2
}
error()
{
    printf >&2 "ERROR: Backup file '%s' already exists.\\n" "$backupFilespec"
    return 1
}
overwrite()
{
    if [ "$1" ]; then
	# Prevent zip from updating the existing archive contents.
	rm --force -- "$backupFilespec"
    else
	forceArg=--force
    fi
}
update()
{
    forceArg=--force
}


printBackupFile()
{
    local filespec="${1:?}"; shift
    # When output is not to the terminal, just print the complete backup
    # filespec. Other applications may use command substitution to obtain
    # it.
    local message; [ -t 1 ] && message='Backed up to'
    printf '%s%s\n' "${message}${message:+ }" "$filespec"
}

archiveAndBackup()
{
    typeset -a filespecs=(); readarray -t filespecs < <(readlink --canonicalize -- "$@")
    local baseDirspec="$(commonpath -- "${filespecs[@]}" || printf /)"
    baseDirspec="${baseDirspec%/}/"

    typeset -a archivedFiles=("${filespecs[@]#$baseDirspec}")

    local status=0 backupFilespec forceArg='' counter=''
    while :
    do
	backupFilespec="$(readlink -nf -- "${backupDirspec:-$baseDirspec}${name}${counter:+ (${counter})}${archiveExtension}")" || status=$?
	[ -n "$backupFilespec" ] || return $status

	if [ -r "$backupFilespec" ]; then
	    $onConflict t
	    case $? in
		0)  break;;
		2)  continue;;
		*)  return 1;;
	    esac
	else
	    break
	fi
    done

    local archiveRedirect
    if [ -t 1 ]; then
	archivedFilesPlural=s; [ ${#archivedFiles[@]} -eq 1 ] && archivedFilesPlural=
	printf 'Archiving %d file%s inside %s...\n' ${#archivedFiles[@]} "$archivedFilesPlural" "$baseDirspec"
    else
	archiveRedirect='>/dev/null'
    fi

    (
	cd "${baseDirspec}" || exit 1
	if eval "${archiveProgram}" '"${backupFilespec}" "${archivedFiles[@]}"' "$archiveRedirect"; then
	    printBackupFile "${backupDirspec:-${baseDirspec}/}${name}${counter:+ (${counter})}${archiveExtension}"
	else
	    printf >&2 'ERROR: Could not create archive: %s\n' "${backupDirspec:-${baseDirspec}/}${name}${counter:+ (${counter})}${archiveExtension}"
	    exit 1
	fi
    )
}

doBackup()
{
    if [ -f "$1" ] && { [ "$isEach" ] || [ $# -eq 1 -a ! "$isArchiveSingle" ]; }; then
	local spec isSuccess= isFailure=; for spec
	do
	    if [ ! -r "$spec" ]; then
		printf >&2 "ERROR: '%s' is not readable.\\n" "$spec"
		isFailure=t
	    fi

	    local -r basename="$(basename -- "$spec")"
	    local backupFilespec forceArg='' counter=''
	    while :
	    do
		local backupFilespec="${backupDirspec:-$(dirname -- "$spec")}${name}${counter:+ (${counter})}${NAMEDBACKUP_FILE_SEPARATOR}${basename}"

		if [ -r "$backupFilespec" ]; then
		    $onConflict ''
		    case $? in
			0)  break;;
			2)  continue;;
			*)  isFailure=t; continue 2;;
		    esac
		else
		    break
		fi
	    done

	    umask 0111	# Drop the execute permission on the backup.
	    cp $forceArg -- "$spec" "$backupFilespec" && isSuccess=t || isFailure=t
	    printBackupFile "$backupFilespec"

	    if [ "$isDeleteOriginal" ]; then
		rm --force -- "$spec" || isFailure=t
		[ ! -t 1 ] || printf 'Deleted original %s\n' "$spec"
	    fi
	done

	if [ "$isFailure" ]; then
	    [ "$isSuccess" ] && return 6 || return 1
	fi
    else
	archiveAndBackup "$@" || return $?

	if [ "$isDeleteOriginal" ]; then
	    rm --force --recursive -- "$@" || return 1
	    [ ! -t 1 ] || printf 'Deleted original %s\n' "$@"
	fi
    fi
}



if [ "$isEach" ]; then
    isSuccess=
    isFailure=

    for filespec
    do
	doBackup "$filespec" && isSuccess=t || isFailure=t
    done

    if [ "$isFailure" ]; then
	[ "$isSuccess" ] && exit 6 || exit 1
    fi
else
    doBackup "$@"
fi
