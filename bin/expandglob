#!/bin/bash
shopt -qs extglob nullglob dotglob globstar

printShortUsage()
{
    # Note: short followed by long option; if the user knows the short one, she can
    # skim the long one.
printf 'Usage: %q %s\n' "$(basename "$1")" "[-f|--first-matching|-l|--last-matching|-1|--single-only|-g|--greater|-s|--smaller|-lt|-le|-eq|-ne|-ge|-gt N] [--] FILE|'FILE-GLOB' [...] [-?|-h|--help]"
}
printUsage()
{
    # This is the short help when launched with no or incorrect arguments.
    # It is printed to stderr to avoid accidental processing.
    printShortUsage "$1" >&2
    printf >&2 '\nTry %q --help for more information.\n' "$(basename "$1")"
}
printLongUsage()
{
    # This is the long "man page" when launched with the help argument.
    # It is printed to stdout to allow paging with 'more'.
    cat <<HELPDESCRIPTION
Print a list of FILE(s) that exist and files matching FILE-GLOB(s). If an
argument both represents an existing file and also matches as a glob, both
literal file and glob results are returned.
HELPDESCRIPTION
    echo
    printShortUsage "$1"
    echo
    cat <<HELPTEXT
    --first-matching|-f	Only print the first matching file.
    --last-matching|-l	Only print the last matching file.
    --single-only|-1	Only print the single matching file, but fail (without
			output) if there's either no match at all or more than one.
    --greater|-g|--smaller|-s|-lt|-le|-eq|-ne|-ge|-gt N
			Test whether the number of matching files is greater /
			smaller than N and indicate the result via exit status.
			Does not print anything.
SEE ALSO:
- globmatch can also match the filename or subpaths (in addition to the full
  filespec), can take multiple GLOBs, but needs to have FILESPECs passed.
- hasglobmatch is expandglob without printing the result (and leaving early).
HELPTEXT
}

size=
compareOp=
matchIndex=
isSingleOnly=
while [ $# -ne 0 ]
do
    case "$1" in
	--help|-h|-\?)	shift; printLongUsage "$0"; exit 0;;
	--first-matching|-f)
			shift; matchIndex=0;;
	--last-matching|-l)
			shift; matchIndex=-1;;
	--single-only|-1)
			shift; matchIndex=0; isSingleOnly=t;;
	--greater|-g)	shift; size="${1:?}"; shift; compareOp=-gt;;
	--smaller|-s)	shift; size="${1:?}"; shift; compareOp=-lt;;
	-lt|-le|-eq|-ne|-ge|-gt)
			compareOp="$1"; shift; size="${1:?}"; shift;;
	--)		shift; break;;
	-*)		{ echo "ERROR: Unknown option \"$1\"!"; echo; printUsage "$0"; } >&2; exit 2;;
	*)		break;;
    esac
done
if [ $# -eq 0 ] || { [ -n "$compareOp" ] && [ -n "$matchIndex" ]; }; then
    printUsage "$0" >&2
    exit 2
fi

IFS=$'\n'
typeset -a result=()
for arg
do
    [ -e "$arg" -o -h "$arg" ] && result+=("$arg")

    # Still need to check for existing files; in case a FILE-GLOB without a
    # wildcard was passed, it's not eliminated by nullglob.
    # shellcheck disable=SC2206
    typeset -a files=($arg)
    for f in "${files[@]}"
    do
	[ -e "$f" -o  -h "$f" ] && result+=("$f")
    done
done

[ ${#result[@]} -eq 0 ] && exit 1
readarray -t result < <(printf '%s\n' "${result[@]}" | sort --unique)

if [ "$isSingleOnly" ] && [ ${#result[@]} -ne 1 ]; then
    exit 1
elif [ -n "$matchIndex" ]; then
    result=("${result[$matchIndex]}")
elif [ -n "$compareOp" ]; then
    [ ${#result[@]} $compareOp $size ]
    exit $?
fi

printf '%s\n' "${result[@]}"
