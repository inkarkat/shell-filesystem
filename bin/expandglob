#!/bin/bash
shopt -qs extglob nullglob dotglob

printShortUsage()
{
    # Note: short followed by long option; if the user knows the short one, she can
    # skim the long one.
printf 'Usage: %q %s\n' "$(basename "$1")" "[--] FILE|'FILE-GLOB' [...] [-?|-h|--help]"
}
printUsage()
{
    # This is the short help when launched with no or incorrect arguments.
    # It is printed to stderr to avoid accidental processing.
    printShortUsage "$1" >&2
    printf >&2 '\nTry %q --help for more information.\n' "$(basename "$1")"
}
printLongUsage()
{
    # This is the long "man page" when launched with the help argument.
    # It is printed to stdout to allow paging with 'more'.
    cat <<HELPDESCRIPTION
Print a list of FILE(s) that exist and files matching FILE-GLOB(s). If an
argument both represents an existing file and also matches as a glob, both
literal file and glob results are returned.
HELPDESCRIPTION
    echo
    printShortUsage "$1"
    echo
    cat <<HELPTEXT
SEE ALSO:
- globmatch can also match the filename or subpaths (in addition to the full
  filespec), can take multiple GLOBs, but needs to have FILESPECs passed.
- hasglobmatch is expandglob without printing the result (and leaving early).
HELPTEXT
}
case "$1" in
    --help|-h|-\?)	shift; printLongUsage "$0"; exit 0;;
    --)			shift;;
esac
if [ $# -eq 0 ]; then
    printUsage "$0" >&2
    exit 2
fi

IFS=' '
typeset -a result=()
for arg
do
    [ -e "$arg" ] && result+=("$arg")

    # Still need to check for existing files; in case a FILE-GLOB without a
    # wildcard was passed, it's not eliminated by nullglob.
    eval "typeset -a files=(${arg// /\\ })"
    for f in "${files[@]}"
    do
	[ -e "$f" ] && result+=("$f")
    done
done

[ ${#result[@]} -eq 0 ] && exit 1
printf '%s\n' "${result[@]}" | sort --unique
