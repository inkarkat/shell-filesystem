#!/bin/bash
shopt -qs extglob

printUsage()
{
    cat <<HELPTEXT
Show the total size in bytes (or relative to DIFF-FILE) of all passed FILE(s)
(with appended filename if multiple are given).
HELPTEXT
    echo
    printf 'Usage: %q %s\n' "$(basename "$1")" '[-d|--diff DIFF-FILE] [--] FILE [...] [-?|-h|--help]'
    printf 'Usage: %q %s | numfmt --to si|iec-i\n' "$(basename "$1")" '[-d|--diff DIFF-FILE] [--] FILE [...]'
    echo
    cat <<HELPTEXT
Test whether the size of [all] FILE[s] is greater / smaller than SIZE.
SUFFIX may be one or two-letter: 1K = 1000, 1Ki = 1024, etc.
HELPTEXT
    echo
    printf 'Usage: %q %s\n' "$(basename "$1")" '-g|--greater|-s|--smaller|-lt|-le|-eq|-ne|-ge|-gt SIZE[SUFFIX] [--] FILE [...]'
    echo
    cat <<HELPTEXT
EXIT STATUS:
    0	Complete success.
    1	The comparison failed; at least one FILE did not pass it.
    2	Bad invocation, wrong or missing command-line arguments.
    4	Some of the passed FILE(s) do not exist.
HELPTEXT
}

getSize()
{
    local format='%s'; [ $# -gt 1 ] && format="$format"$'\t%n'
    stat --dereference --format "$format"  -- "$@" || return 4
}

compareOp=
diffSize=
while [ $# -ne 0 ]
do
    case "$1" in
	--help|-h|-\?)	shift; printUsage "$0"; exit 0;;
	--diff|-d)	shift; diffSize="$(getSize "$1")" || exit $?; shift;;
	--greater|-g)	shift; size="$(printf %s "$1" | numfmt --from=auto)" || exit $?; shift; compareOp=-gt;;
	--smaller|-s)	shift; size="$(printf %s "$1" | numfmt --from=auto)" || exit $?; shift; compareOp=-lt;;
	-lt|-le|-eq|-ne|-ge|-gt)
			compareOp="$1"; shift; size="$(printf %s "$1" | numfmt --from=auto)" || exit $?; shift;;
	--)		shift; break;;
	-*)		{ echo "ERROR: Unknown option \"$1\"!"; echo; printUsage "$0"; } >&2; exit 2;;
	*)		break;;
    esac
done
if [ $# -eq 0 ]; then
    printUsage "$0" >&2
    exit 2
fi

if [ -n "$compareOp" ]; then
    exitStatus=3
    compareStatus=0
    while read -r fileSize filespec || { exitStatus="$fileSize"; break; }	# Exit status from the process substitution (<(getSize)) is lost; return the actual exit status via an incomplete (i.e. missing the newline) last line.
    do
	[ $fileSize $compareOp $size ] || compareStatus=1
    done < <(getSize "$@"; printf %d "$?")
    exit $((exitStatus > 0 ? exitStatus : compareStatus))
elif [ -n "$diffSize" ]; then
    exitStatus=3
    while read -r fileSize filespec || { exitStatus="$fileSize"; break; }	# Exit status from the process substitution (<(getSize)) is lost; return the actual exit status via an incomplete (i.e. missing the newline) last line.
    do
	printf "%d${filespec:+\\t}%s\\n" "$((fileSize - diffSize))" "$filespec"
    done < <(getSize "$@"; printf %d "$?")
    exit $exitStatus
else
    getSize "$@"
fi
