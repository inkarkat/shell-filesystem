#!/bin/bash
shopt -qs extglob nullglob dotglob

: ${FINDUP_FILE_MARKER='{}'}
fileMarker="$FINDUP_FILE_MARKER"; unset FINDUP_FILE_MARKER

case ",${DEBUG:-}," in
    *,findup\!,*)	printf >&2 %s "$PS4"; printf >&2 '%q ' 'findup' "$@"; printf >&2 '\n'; exit;;
    *,findup,*)		printf >&2 %s "$PS4"; printf >&2 '%q ' 'findup' "$@"; printf >&2 '\n';;&
    *,findup\&,*)	printf >&2 %s "$PS4"; printf >&2 '%q ' 'findup' "$@"; printf >&2 '\n'; findupTrace='set -x';;&
    *,findup=*,*)	findupCommand=",${DEBUG},"; findupCommand="${findupCommand#*,findup=}"; findupCommand="${findupCommand%%,*}"; exec $findupCommand "$@";;
esac

printShortUsage()
{
    # Note: short followed by long option; if the user knows the short one, she can
    # skim the long one.
    printf 'Usage: %q %s\n' "$(basename "$1")" "[STARTING-POINT [...]] [-1|--stop-at-first] [--stop-at DIR [...]] [--not-above DIR [...]] [--stopdepth LEVELS] [--mindepth LEVELS] [--maxdepth LEVELS] [--print|--exec COMMAND [...] ;|--execdir COMMAND [...] ;] [--] FILE|'FILE-GLOB' [...] [-?|-h|--help]"
}
printUsage()
{
    # This is the short help when launched with no or incorrect arguments.
    # It is printed to stderr to avoid accidental processing.
    printShortUsage "$1" >&2
    printf >&2 '\nTry %q --help for more information.\n' "$(basename "$1")"
}
printLongUsage()
{
    # This is the long "man page" when launched with the help argument.
    # It is printed to stdout to allow paging with 'more'.
    cat <<HELPDESCRIPTION
Locate a FILE or matches for FILE-GLOB in parent directories (from the current
directory or passed STARTING-POINT(s), up to the root directory), and print its
/ their full path(s). Each STARTING-POINT must be an existing directory or at
least have an existing (grand-...)parent directory.
HELPDESCRIPTION
    echo
    printShortUsage "$1"
    cat <<HELPTEXT
    --stop-at-first|-1	Stop ascending further (and considering more
			STARTING-POINT(s)) once match(es) have been found in any
			upper directory.
    --stop-at DIR	Stop ascending further when arriving at DIR.
    --not-above DIR	Discard STARTING-POINTs that are already above / at DIR
			and also stop ascending further when arriving at DIR.
    --stopdepth LEVELS	Stop ascending when arriving at LEVELS subdirectory from
			the top (/ = 0).
    --maxdepth LEVELS	Ascend at most LEVELS of directories above the current
			directory.
    --mindepth LEVELS	Do not test at levels less than LEVELS. --mindepth 1
			means report any files except inside the current
			directory.
    --exec COMMAND ;	Execute COMMAND from the starting directory.${fileMarker:+ $fileMarker is
			replaced with its filespec.}
    --execdir COMMAND ;	Execute COMMAND from the directory containing the found
			file. $fileMarker is replaced with its filespec.
HELPTEXT
}

fileGlobFollowedByOptionCheck()
{
    if [ ${#fileGlobs[@]} -gt 0 ]; then
	fileGlobsPlural=s
	fileGlobsVerb=are
	if [ ${#fileGlobs[@]} -eq 1 ]; then
	    fileGlobsPlural=
	    fileGlobsVerb=is
	fi
	printf >&2 "ERROR: %s %s not a valid STARTING-POINT%s and to be treated as FILE|'FILE-GLOB' must be placed after %s.\\n" "${fileGlobs[*]}" "$fileGlobsVerb" "$fileGlobsPlural" "$1"
	exit 2
    fi
}
findExistingStartingPointAbove()
{
    local lowerStartingPoint
    local startingPoint="$1"; shift
    until [ "$lowerStartingPoint" = "$startingPoint" ]
    do
	lowerStartingPoint="$startingPoint"
	startingPoint="$(dirname -- "$startingPoint")"
	if [ -d "$startingPoint" ]; then
	    printf %s "$startingPoint"
	    return 0
	fi
    done
    return 1
}

case "$1" in
    --help|-h|-\?)	shift; printLongUsage "$0"; exit 0;;
esac
typeset -a startingPoints=()
# As we change directories, need to first convert all passed starting points to
# absolute dirspecs.
while [ $# -ne 0 ]
do
    if [ -d "$1" ]; then
	startingPoints+=("$(realpath --no-symlinks -- "$1")"); shift
    elif [ "${1:0:1}" != '-' -a "${1//\//}" != "$1" ]; then
	if [ -e "$1" ]; then
	    printf >&2 'ERROR: STARTING-POINT is not a directory: %s\n' "$1"
	    echo >&2
	    printUsage "$0" >&2
	    exit 2
	elif startingPoint="$(findExistingStartingPointAbove "$(realpath --no-symlinks -- "$1" 2>/dev/null)")"; then
	    startingPoints+=("$startingPoint"); shift
	else
	    break
	fi
    else
	break
    fi
done

typeset -a fileGlobs=()
isStopAtFirst=
typeset -a stopAt=()
typeset -a notAbove=()
stopdepth=
maxdepth=
mindepth=
unset isPrint
isExecDir=t
typeset -a execCommand=()
while [ $# -ne 0 ]
do
    case "$1" in
	--*|-[h1?])	fileGlobFollowedByOptionCheck "$1";;&
	--help|-h|-\?)	shift; printLongUsage "$0"; exit 0;;
	--stop-at-first|-1)
			shift; isStopAtFirst=t;;
	--stop-at)	shift; stopAt+=("${1%/}"); shift;;
	--not-above)	shift; notAbove+=("${1%/}"); stopAt+=("${1%/}"); shift;;
	--stopdepth)	shift; stopdepth="$1"; shift;;
	--maxdepth)	shift; maxdepth="$1"; shift;;
	--mindepth)	shift; mindepth="$1"; shift;;
	--print)	shift; isPrint=t;;
	--exec)		isExecDir=;&
	--execdir)	shift; : ${isPrint=}
			while [ "$1" != ';' ]
			do
			    if [ $# -eq 0 ]; then
				echo 'ERROR: --exec must be concluded by ;'
				echo
				printUsage "$0"
				exit 2
			    fi >&2

			    execCommand+=("$1"); shift
			done
			shift
			;;
	--)		shift; break;;
	-*)		{ echo "ERROR: Unknown option \"$1\"!"; echo; printUsage "$0"; } >&2; exit 2;;
	*)		fileGlobs+=("$1"); shift;;
    esac
done
set -- "${fileGlobs[@]}" "$@"
if [ $# -eq 0 ]; then
    printUsage >&2 "$0"
    exit 2
fi

processMatches()
{
    [ "$mindepth" ] && [ $level -lt $mindepth ] && return 1
    [ "$maxdepth" ] && [ $level -gt $maxdepth ] && return 1

    [ "${isPrint-t}" ] && printf "${1}\\n" "${@:2}"

    if [ ${#execCommand[@]} -gt 0 ]; then
	local filespec; printf -v filespec "$@"
	typeset -a interpolatedCommand=("${execCommand[@]//"$fileMarker"/$filespec}")
	(
	    if [ ! "$isExecDir" ]; then
		cd "$baseDir" || exit $?
	    fi

	    "${interpolatedCommand[@]}"
	) || exit $?
    fi
}
processGlobMatches()
{
    typeset -a filespecs=()
    readarray -t filespecs < <(expandglob -- "$@")
    [ ${#filespecs[@]} -eq 0 ] && return 1

    local status=1
    for f in "${filespecs[@]}"
    do
	processMatches '%s/%s' "${PWD%/}" "$f" && status=0
    done
    return $status
}
$findupTrace
status=1
for baseDir in "${startingPoints[@]:-.}"
do
    [ "${baseDir:?}" = . ] || cd "$baseDir"

    for notAboveDir in "${notAbove[@]}"
    do
	inside "${PWD%/}" "$notAboveDir" && continue 2
    done

    oldWd=
    let level=0
    while [ "$oldWd" != "$PWD" ]
    do
	if processGlobMatches "$@" 2>/dev/null; then
	    [ "$isStopAtFirst" ] && exit 0
	    status=0
	fi

	[ ${#stopAt[@]} -gt 0 ] && contains "${PWD%/}" "${stopAt[@]}" && break
	if [ "$stopdepth" ]; then
	    currentPathSeparators="${PWD%/}"
	    currentPathSeparators="${currentPathSeparators//[^\/]/}"
	    [ ${#currentPathSeparators} -le $stopdepth ] && break
	fi

	oldWd="$PWD"
	cd .. || exit 3
	let level+=1
    done
done
exit $status
