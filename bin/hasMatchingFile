#!/bin/bash

printShortUsage()
{
    # Note: short followed by long option; if the user knows the short one, she can
    # skim the long one.
    printf 'Usage: %q %s\n' "$(basename "$1")" "[-r|--recursive] 'FILENAME-GLOB' DIR [...] [-?|-h|--help]"
}
printUsage()
{
    # This is the short help when launched with no or incorrect arguments.
    # It is printed to stderr to avoid accidental processing.
    printShortUsage "$1" >&2
    printf >&2 '\nTry %q --help for more information.\n' "$(basename "$1")"
}
printLongUsage()
{
    # This is the long "man page" when launched with the help argument.
    # It is printed to stdout to allow paging with 'more'.
    cat <<HELPDESCRIPTION
Check if a file matching a given FILENAME-GLOB exists in given DIR(s).
HELPDESCRIPTION
    echo
    printShortUsage "$1"
    echo
    cat <<HELPTEXT
    --recursive|-r	Also search subdirectories.

SEE ALSO:
- hasglobmatch takes a FILE-GLOB that's based on the current directory and
  doesn't recurse.
HELPTEXT
}

typeset -a findDepthArgs=(-maxdepth 1)
case "$1" in
    --help|-h|-\?)	shift; printLongUsage "$0"; exit 0;;
    --recursive|-r)	findDepthArgs=(); shift;;
esac
if [ $# -lt 2 ]; then
    printUsage "$0" >&2
    exit 2
fi
glob="${1:?}"; shift

# Drop nonexisting directories; the glob can't match in them.
typeset -a dirspecs=()
for arg
do
    [ -d "$arg" ] && dirspecs+=("$arg")
done

[ -n "$(find "${dirspecs[@]}" "${findDepthArgs[@]}" -name "$glob" -print -quit)" ]
