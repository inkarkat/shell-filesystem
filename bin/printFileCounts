#!/bin/bash
shopt -qs nullglob

printShortUsage()
{
    # Note: short followed by long option; if the user knows the short one, she can
    # skim the long one.
    printf 'Usage: %q %s\n' "$(basename "$1")" '[-n|--since [DESCRIPTION\t]DATE ... [-a|--all]] [--dir-as-verb DIR ...] DIR [...] [-?|-h|--help]'
}
printUsage()
{
    # This is the short help when launched with no or incorrect arguments.
    # It is printed to stderr to avoid accidental processing.
    printShortUsage "$1" >&2
    printf >&2 'Try %q --help for more information.\n' "$(basename "$1")"
}
printLongUsage()
{
    # This is the long "man page" when launched with the help argument.
    # It is printed to stdout to allow paging with 'more'.
    cat <<HELPDESCRIPTION
Print the number of files (without subdirs) in each passed DIR (if it's not
empty).
HELPDESCRIPTION
    echo
    printShortUsage "$1"
    cat <<HELPTEXT
    --since|-n [DESCRIPTION\t]DATE
			Count files newer than DATE (with the DATE optionally
			mentioned as DESCRIPTION). If given multiple times, will
			tally all DATE ranges separately.
    --all|-a		Also add the complete number of files when --since is
			used.
    --dir-as-verb DIR	Interpret DIR as a verb; i.e. instead of saying "in
			DIR", use "to DIR".
HELPTEXT
}

isAll=
typeset -a dates=()
typeset -a dirsAsVerbs=()
while [ $# -ne 0 ]
do
    case "$1" in
	--help|-h|-\?)	shift; printLongUsage "$0"; exit 0;;
	--since|-n)	shift; dates+=("$1"); shift;;
	--all|-a)	shift; isAll=t;;
	--dir-as-verb)	shift; dirsAsVerbs+=("$1"); shift;;
	--)		shift; break;;
	-*)		{ echo "ERROR: Unknown option \"$1\"!"; echo; printUsage "$0"; } >&2; exit 2;;
	*)		break;;
    esac
done
if [ $# -eq 0 ]; then
    printUsage "$0" >&2
    exit 2
fi
[ ${#dates[@]} -eq 0 ] && isAll=t

typeset -a results=()
for dir
do
    files=("$dir"/*)

    if [ ${#files[@]} -gt 0 ]; then
	let count=0
	let fileCount=0
	typeset dateCounts=()
	if [ "$isAll" ]; then
	    typeset -a subdirs=("$dir"/*/)
	    fileCount=$((${#files[@]} - ${#subdirs[@]}))
	    let count+=$fileCount
	fi
	for dateSpec in "${dates[@]}"
	do
	    c="$(find "$dir" -maxdepth 1 -type f -newermt "${dateSpec#*$'\t'}" -printf '.' | wc -c)"
	    if [ $c -gt 0 ]; then
		dateCounts+=("${dateSpec%%$'\t'*} $c")
	    fi
	    let count+=$c
	done

	if [ $count -gt 0 ]; then
	    name="$(basename -- "$dir")"
	    preposition='in'; contains "$name" "${dirsAsVerbs[@]}" && preposition='to'

	    if [ ${#dateCounts[@]} -eq 0 ]; then
		printf -v r '%d %s %s' "$fileCount" "$preposition" "$name"
	    elif [ -n "$isAll" -a $count -gt $fileCount ]; then
		printf -v r '%d (%s) %s %s' "$fileCount" "$(joinBy ', ' "${dateCounts[@]}")" "$preposition" "$name"
	    else
		printf -v r '%s %s %s' "$(joinBy ', ' "${dateCounts[@]}")" "$preposition" "$name"
	    fi
	    results+=("$r")
	fi
    fi
done
exec joinBy ', ' "${results[@]}"
