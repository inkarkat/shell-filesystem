#!/bin/bash
shopt -qs nullglob

printShortUsage()
{
    # Note: short followed by long option; if the user knows the short one, she can
    # skim the long one.
    printf 'Usage: %q %s\n' "$(basename "$1")" "[-t|--newer-than EPOCH|-N|--newer FILE|'GLOB' [...]|-c|--count N] [-e|--include-epoch] [--] [DIRSPEC|FILESPEC [...]] [-?|-h|--help]"
}
printUsage()
{
    # This is the short help when launched with no or incorrect arguments.
    # It is printed to stderr to avoid accidental processing.
    printShortUsage "$1" >&2
    printf >&2 '\nTry %q --help for more information.\n' "$(basename "$1")"
}
printLongUsage()
{
    # This is the long "man page" when launched with the help argument.
    # It is printed to stdout to allow paging with 'more'.
    cat <<HELPDESCRIPTION
Print the filespecs of the last modified file(s) in the current directory / in
each passed DIRSPEC / within each passed FILESPEC. Output order is globally
sorted by modification date, ascending.
HELPDESCRIPTION
    echo
    printShortUsage "$1"
    cat <<HELPTEXT
    --newer-than|-t EPOCH   Print all files that have been modified after EPOCH
			    (seconds since 1970).
    --newer|-N FILE|'GLOB'  Print all files that have been modified after FILE
			    / the newest file matching GLOB (if the directory
			    has such a file). Output order is globally sorted by
			    modification date, ascending.
    --count|-c N	    Print the last N modified files (or fewer if not
			    available) instead of just the last one / all newer.
    --include-epoch|-e	    Put the file modification date (seconds since 1970)
			    before each filespec, separated by a tab.
EXIT STATUS:
    0	Complete success.
    1	No files found.
    2	Bad invocation, wrong or missing command-line arguments.
    4	FILE does not exist / 'GLOB' did not yield any files.
HELPTEXT
}

typeset -a sortByDateThenFilespec=(sort --field-separator $'\t' -k 1,1n -k 2f)
typeset -a cutter=(cut -f 2-)
sentinelAge=
typeset -a globs=()
unset count
while [ $# -ne 0 ]
do
    case "$1" in
	--help|-h|-\?)	shift; printLongUsage "$0"; exit 0;;
	--newer-than|-t)
			shift; sentinelAge="${1:?}"; shift;;
	--newer|-N)	shift; globs+=("$1"); shift;;
	--count|-c)	shift; count="$1"; shift;;
	--include-epoch|-e)
			shift; cutter=();;
	--)		shift; break;;
	-*)		{ echo "ERROR: Unknown option \"$1\"!"; echo; printUsage "$0"; } >&2; exit 2;;
	*)		break;;
    esac
done
IFS=$'\n'
fileAge()
{
    stat -L --format %Y "$@" 2>/dev/null || echo -1
}
if [ ${#globs[@]} -gt 0 ]; then
    if [ -n "$sentinelAge" ]; then
	echo 'ERROR: Cannot combine --newer-than with --newer.'
	echo
	printUsage "$0"
	exit 2
    fi >&2

    sentinelAge=-1
    readarray -t globbedFilespecs < <(expandglob -- "${globs[@]}")
    for globResult in "${globbedFilespecs[@]}"
    do
	age=$(fileAge "$globResult")
	[ $age -gt $sentinelAge ] && sentinelAge=$age
    done
    if [ $sentinelAge -eq -1 ]; then
	printf >&2 'No sentinel files have been found for %s\n' "${globs[*]}"
	exit 4
    fi
fi
[ $# -gt 0 ] || set -- "$PWD"

findNewer()
{
    local filespec
    for filespec in "${filespecs[@]}"
    do
	age=$(fileAge "$filespec")
	[ $age -gt $sentinelAge ] && printf '%d\t%s\n' "$age" "$filespec"
    done
}

findLastModified()
{
    local filespec
    for filespec in "${filespecs[@]}"
    do
	age=$(fileAge "$filespec")
	printf '%d\t%s\n' "$age" "$filespec"
    done
}

if [ "$sentinelAge" ]; then
    algorithm=findNewer
else
    : ${count:=1}
    algorithm=findLastModified
fi
typeset -a limiter=(); [ -n "$count" ] && limiter=(tail -n "$count")

typeset -a filespecs=()
for dirOrFile
do
    if [ -d "$dirOrFile" ]; then
	filespecs+=("$dirOrFile"/*)
    elif [ -e "$dirOrFile" ]; then
	filespecs+=("$dirOrFile")
    fi
done
[ ${#filespecs[@]} -eq 0 ] && exit 1

$algorithm | \
    eval '"${sortByDateThenFilespec[@]}"' \
    "${limiter:+|}" '"${limiter[@]}"' \
    "${cutter:+|}" '"${cutter[@]}"' \
    | outputOrError
