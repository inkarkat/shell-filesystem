#!/bin/bash
shopt -qs nullglob

printShortUsage()
{
    # Note: short followed by long option; if the user knows the short one, she can
    # skim the long one.
    printf 'Usage: %q %s\n' "$(basename "$1")" "[-t|--newer-than EPOCH|-N|--newer FILE|'GLOB' [...]|-c|--count N] [--] [DIRSPEC [...]] [-?|-h|--help]"
}
printUsage()
{
    # This is the short help when launched with no or incorrect arguments.
    # It is printed to stderr to avoid accidental processing.
    printShortUsage "$1" >&2
    printf >&2 'Try %q --help for more information.\n' "$(basename "$1")"
}
printLongUsage()
{
    # This is the long "man page" when launched with the help argument.
    # It is printed to stdout to allow paging with 'more'.
    cat <<HELPDESCRIPTION
Print the filespecs of the last modified file(s) in the current directory / in
each passed DIRSPEC. Output order is globally sorted by modification date,
ascending.
HELPDESCRIPTION
    echo
    printShortUsage "$1"
    cat <<HELPTEXT
    --newer-than|-t EPOCH   Print all files that have been modified after EPOCH
			    (seconds since 1970).
    --newer|-N FILE|'GLOB'  Print all files that have been modified after FILE
			    / the newest file matching GLOB (if the directory
			    has such a file). Output order is globally sorted by
			    modification date, ascending.
    --count|-c N	    Print the last N modified files (or fewer if not
			    available) instead of just the last one.
EXIT STATUS:
    0	Complete success.
    1	No files found.
    2	Bad invocation, wrong or missing command-line arguments.
    4	FILE does not exist / 'GLOB' did not yield any files.
HELPTEXT
}

sentinelAge=
typeset -a globs=()
unset count
while [ $# -ne 0 ]
do
    case "$1" in
	--help|-h|-\?)	shift; printLongUsage "$0"; exit 0;;
	--newer-than|-t)
			shift; sentinelAge="${1:?}"; shift;;
	--newer|-N)	shift; globs+=("$1"); shift;;
	--count|-c)	shift; count="$1"; shift;;
	--)		shift; break;;
	-*)		{ echo "ERROR: Unknown option \"$1\"!"; echo; printShortUsage "$0"; } >&2; exit 2;;
	*)		break;;
    esac
done
IFS=$'\n'
fileAge()
{
    stat -L --format %Y "$@" 2>/dev/null || echo -1
}
if [ ${#globs[@]} -gt 0 ]; then
    if [ -n "$sentinelAge" ]; then
	echo 'ERROR: Cannot combine --newer-than with --newer.'
	echo
	printShortUsage "$0"
	exit 2
    elif [ -n "${count+t}" ]; then
	echo 'ERROR: Cannot combine --newer with --count.'
	echo
	printShortUsage "$0"
	exit 2
    fi >&2

    sentinelAge=-1
    for globResult in ${globs[@]}
    do
	age=$(fileAge "$globResult")
	[ $age -gt $sentinelAge ] && sentinelAge=$age
    done
    if [ $sentinelAge -eq -1 ]; then
	printf >&2 'No sentinel files have been found for %s\n' "${globs[*]}"
	exit 4
    fi
elif [ -n "${count+t}" -a -n "$sentinelAge" ]; then
    echo 'ERROR: Cannot combine --newer-than with --count.'
    echo
    printShortUsage "$0"
    exit 2
fi
[ $# -gt 0 ] || set -- "$PWD"
: ${count:=1}

findNewer()
{
    local dirspec="${1:?}"; shift
    local filespec
    for filespec in "$dirspec"/*
    do
	age=$(fileAge "$filespec")
	[ $age -gt $sentinelAge ] && printf '%d\t%s\n' "$age" "$filespec"
    done
}

findLastModified()
{
    local dirspec="${1:?}"; shift
    local filespec
    for filespec in "$dirspec"/*
    do
	age=$(fileAge "$filespec")
	printf '%d\t%s\n' "$age" "$filespec"
    done
}

typeset -a sortByDateThenFilespec=(sort --field-separator $'\t' -k 1,1n -k 2f)
if [ "$sentinelAge" ]; then
    algorithm=findNewer
    typeset -a limiter=()
else
    algorithm=findLastModified
    typeset -a limiter=(tail -n "$count")
fi

for dirspec
do
    $algorithm "$dirspec" && status=0
done | \
    eval '"${sortByDateThenFilespec[@]}"' \
    "${limiter:+|}" '"${limiter[@]}"' | \
    cut -f 2- | \
    outputOrError
